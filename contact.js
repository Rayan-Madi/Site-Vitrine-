   // JavaScript pour le formulaire de contact avec alerte de confirmation
document.addEventListener('DOMContentLoaded', function() {
    console.log('Script contact.js charg√©');
    
    // Gestion du formulaire de contact
    const contactForm = document.getElementById('contact-form');
    const notification = document.getElementById('notification');
    const closeNotificationBtn = document.getElementById('close-notification');
    
    // Debug : v√©rifier que tous les √©l√©ments existent
    console.log('√âl√©ments trouv√©s:', {
        contactForm: !!contactForm,
        notification: !!notification,
        closeNotificationBtn: !!closeNotificationBtn
    });
    
    // Soumission du formulaire
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            console.log('Formulaire soumis');
            
            // R√©cup√©ration des √©l√©ments du formulaire
            const nomInput = document.getElementById('nom');
            const prenomInput = document.getElementById('prenom');
            const emailInput = document.getElementById('email');
            const telephoneInput = document.getElementById('telephone');
            const sujetInput = document.getElementById('sujet');
            const messageInput = document.getElementById('message');
            
            // V√©rifier que tous les champs obligatoires existent
            if (!nomInput || !prenomInput || !emailInput || !sujetInput || !messageInput) {
                console.error('Un ou plusieurs champs du formulaire sont introuvables');
                alert('‚ùå Erreur : formulaire incomplet');
                return;
            }
            
            // R√©cup√©ration des valeurs
            const nom = nomInput.value.trim();
            const prenom = prenomInput.value.trim();
            const email = emailInput.value.trim();
            const telephone = telephoneInput ? telephoneInput.value.trim() : '';
            const sujet = sujetInput.value.trim();
            const message = messageInput.value.trim();
            
            // Validation des champs obligatoires
            if (!nom || !prenom || !email || !sujet || !message) {
                alert('‚ö†Ô∏è Veuillez remplir tous les champs obligatoires (Nom, Pr√©nom, Email, Sujet et Message).');
                return;
            }
            
            // Validation de l'email
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
                alert('‚ö†Ô∏è Veuillez entrer une adresse email valide.');
                return;
            }
            
            // Validation du t√©l√©phone (si rempli)
            if (telephone && telephone.length > 0) {
                const phoneRegex = /^[0-9+\-\s()]+$/;
                if (!phoneRegex.test(telephone)) {
                    alert('‚ö†Ô∏è Le num√©ro de t√©l√©phone contient des caract√®res non valides.');
                    return;
                }
            }
            
            // Si toutes les validations passent, afficher l'alerte de succ√®s
            const successMessage = `‚úÖ Formulaire envoy√© avec succ√®s !
            
üìù R√©capitulatif de votre message :
‚Ä¢ Nom : ${nom}
‚Ä¢ Pr√©nom : ${prenom}
‚Ä¢ Email : ${email}
${telephone ? `‚Ä¢ T√©l√©phone : ${telephone}` : ''}
‚Ä¢ Sujet : ${sujet}
‚Ä¢ Message : ${message.substring(0, 50)}${message.length > 50 ? '...' : ''}

üí¨ Nous avons bien re√ßu votre message et vous r√©pondrons dans les plus brefs d√©lais.
            
Merci de nous avoir contact√©s !`;
            
            alert(successMessage);
            
            // Afficher √©galement la notification styl√©e si elle existe
            if (notification) {
                notification.classList.add('show');
                console.log('Notification affich√©e');
            }
            
            // R√©initialiser le formulaire apr√®s la confirmation
            this.reset();
            
            // Retirer la classe focused des groupes de formulaire
            const focusedGroups = document.querySelectorAll('.form-group.focused');
            focusedGroups.forEach(group => {
                group.classList.remove('focused');
            });
            
            console.log('Formulaire r√©initialis√© avec succ√®s');
        });
    } else {
        console.error('Formulaire de contact introuvable');
    }
    
    // Fermer la notification
    if (closeNotificationBtn && notification) {
        closeNotificationBtn.addEventListener('click', function() {
            console.log('Fermeture de la notification');
            notification.classList.remove('show');
        });
    }
    
    // Fermer la notification en cliquant sur le fond
    if (notification) {
        notification.addEventListener('click', function(e) {
            if (e.target === this) {
                this.classList.remove('show');
            }
        });
    }
    
    // Menu mobile
    const mobileMenuBtn = document.querySelector('.mobile-menu-btn');
    const navLinks = document.querySelector('.nav-links');
    
    console.log('Menu mobile - √âl√©ments trouv√©s:', {
        mobileMenuBtn: !!mobileMenuBtn,
        navLinks: !!navLinks
    });
    
    if (mobileMenuBtn && navLinks) {
        mobileMenuBtn.addEventListener('click', function() {
            console.log('Menu mobile cliqu√©');
            this.classList.toggle('active');
            navLinks.classList.toggle('active');
        });
    }
    
    // Animation des champs de formulaire
    const formInputs = document.querySelectorAll('.form-group input, .form-group textarea');
    console.log('Champs de formulaire trouv√©s:', formInputs.length);
    
    formInputs.forEach(function(input, index) {
        console.log('Ajout d\'√©v√©nements au champ', index);
        
        input.addEventListener('focus', function() {
            if (this.parentElement) {
                this.parentElement.classList.add('focused');
            }
        });
        
        input.addEventListener('blur', function() {
            if (this.value === '' && this.parentElement) {
                this.parentElement.classList.remove('focused');
            }
        });
        
        // V√©rifier si le champ a d√©j√† une valeur au chargement
        if (input.value !== '' && input.parentElement) {
            input.parentElement.classList.add('focused');
        }
    });
    
    // Fonction pour valider en temps r√©el
    function validateField(input, errorMessage) {
        const value = input.value.trim();
        if (value === '') {
            input.style.borderColor = '#ff6b6b';
            return false;
        } else {
            input.style.borderColor = '#d4b854';
            return true;
        }
    }
    
    // Validation en temps r√©el pour l'email
    const emailInput = document.getElementById('email');
    if (emailInput) {
        emailInput.addEventListener('blur', function() {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (this.value.trim() !== '' && !emailRegex.test(this.value)) {
                this.style.borderColor = '#ff6b6b';
            } else if (this.value.trim() !== '') {
                this.style.borderColor = '#d4b854';
            }
        });
    }
    
    console.log('Script contact.js enti√®rement initialis√© avec validation am√©lior√©e');
});

// Fonction utilitaire pour afficher des messages personnalis√©s
function showCustomAlert(title, message, type = 'success') {
    const icons = {
        success: '‚úÖ',
        warning: '‚ö†Ô∏è',
        error: '‚ùå',
        info: '‚ÑπÔ∏è'
    };
    
    const icon = icons[type] || icons.info;
    alert(`${icon} ${title}\n\n${message}`);
}

// Test simple pour v√©rifier que le script se charge
console.log('Fichier contact.js charg√© - Version am√©lior√©e avec alerte de confirmation');
